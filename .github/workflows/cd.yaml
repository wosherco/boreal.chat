name: Build, Publish and Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}

jobs:
  build-and-push:
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set version
        id: set-version
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=latest
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Copy example .env
        run: cp .env.example .env

      - name: Build all images in parallel
        run: |
          docker compose -f docker-compose.build.yaml build --parallel

      - name: Tag and push images
        run: |
          # Get all service names from docker-compose.build.yaml
          SERVICES=$(grep -E "^  [a-zA-Z0-9_.-]+:" docker-compose.build.yaml | sed 's/://g' | awk '{print $1}')

          # Tag and push each image
          for SERVICE in $SERVICES; do
            # Skip empty lines
            [ -z "$SERVICE" ] && continue
            
            # Get the image name from docker-compose.build.yaml
            IMAGE_NAME=$(grep -A5 "  $SERVICE:" docker-compose.build.yaml | grep "image:" | awk '{print $2}')
            
            # Skip if no image name found
            [ -z "$IMAGE_NAME" ] && continue
            
            echo "Processing $SERVICE with image $IMAGE_NAME"
            
            # Tag with version and SHA
            GHCR_IMAGE="${REGISTRY}/${OWNER}/${SERVICE}"
            SHA_TAG=$(echo ${{ github.sha }} | cut -c1-7)
            
            # For 'main' branch, VERSION is 'latest'
            docker tag $IMAGE_NAME $GHCR_IMAGE:$VERSION
            docker tag $IMAGE_NAME $GHCR_IMAGE:$SHA_TAG
            
            # Push if not a PR
            if [[ "${{ github.event_name }}" != "pull_request" ]]; then
              docker push $GHCR_IMAGE:$VERSION
              docker push $GHCR_IMAGE:$SHA_TAG
              echo "Pushed $GHCR_IMAGE:$VERSION and $GHCR_IMAGE:$SHA_TAG"
            else
              echo "Skipping push for PR (would have pushed $GHCR_IMAGE:$VERSION and $GHCR_IMAGE:$SHA_TAG)"
            fi
          done

  ###### SENTRY SOURCEMAP JOBS
  upload-sourcemaps-app:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/setup

      - name: Build and upload sourcemaps for app
        env:
          CI: 1
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: borealchat
          SENTRY_PROJECT: webapp
        run: pnpm build

  release:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && !contains(github.event.head_commit.message, '[skip ci]')
    permissions:
      contents: write
      packages: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # We need to fetch all history and tags for changeset version to work correctly
          fetch-depth: 0

      - name: Setup
        uses: ./.github/setup
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        id: changesets
        uses: changesets/action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push tag from package.json version
        if: steps.changesets.outputs.hasChangesets == 'false'
        run: |
          # Version key/value should be on his own line
          PACKAGE_VERSION=$(cat package.json \
            | grep version \
            | head -1 \
            | awk -F: '{ print $2 }' \
            | sed 's/[",]//g' \
            | tr -d '[:space:]')

          echo "Package version: $PACKAGE_VERSION"
          git tag -a "v$PACKAGE_VERSION" -m "Release v$PACKAGE_VERSION"
          git push origin "v$PACKAGE_VERSION"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to the Container registry
        if: steps.changesets.outputs.hasChangesets == 'false'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Retag and push images
        if: steps.changesets.outputs.hasChangesets == 'false'
        run: |
          SERVICES=$(grep -E "^  [a-zA-Z0-9_.-]+:" docker-compose.build.yaml | sed 's/://g' | awk '{print $1}')
          SHA_TAG=$(echo ${{ github.sha }} | cut -c1-7)
          VERSION=$(echo ${{ steps.changesets.outputs.newVersion }} | sed 's/^v//')

          for SERVICE in $SERVICES; do
            [ -z "$SERVICE" ] && continue
            GHCR_IMAGE="${{ env.REGISTRY }}/${{ env.OWNER }}/${SERVICE}"
            echo "Processing $SERVICE with image $GHCR_IMAGE"

            echo "Pulling $GHCR_IMAGE:$SHA_TAG"
            docker pull "$GHCR_IMAGE:$SHA_TAG"

            echo "Tagging $GHCR_IMAGE:$SHA_TAG as $GHCR_IMAGE:$VERSION"
            docker tag "$GHCR_IMAGE:$SHA_TAG" "$GHCR_IMAGE:$VERSION"
            
            echo "Pushing $GHCR_IMAGE:$VERSION"
            docker push "$GHCR_IMAGE:$VERSION"
          done

      - name: Trigger Deploy
        if: steps.changesets.outputs.hasChangesets == 'false'
        env:
          DEPLOY_WEBHOOK_TOKEN: ${{ secrets.DEPLOY_WEBHOOK_TOKEN }}
          DEPLOY_WEBHOOK_URL: ${{ secrets.DEPLOY_WEBHOOK_URL }}
        run: |
          curl -X POST -H "Authorization: Bearer $DEPLOY_WEBHOOK_TOKEN" "$DEPLOY_WEBHOOK_URL"
