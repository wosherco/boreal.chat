import { ModelId, MODELS } from "../src/lib/common/ai/models.js";
import { file } from "bun";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

async function fetchModelFeatures() {
  console.log("Fetching model features from OpenRouter...");
  const response = await fetch("https://openrouter.ai/api/v1/models");
  if (!response.ok) {
    throw new Error(`Failed to fetch models: ${response.statusText}`);
  }
  const { data: allModels } = (await response.json()) as { data: OpenRouterModel[] };
  console.log(`Fetched ${allModels.length} models.`);

  const supportedModels = new Set(MODELS);
  const supportedModelsData = allModels.filter((model) => supportedModels.has(model.id as ModelId));
  console.log(`Found ${supportedModelsData.length} supported models.`);

  const features: Record<string, unknown> = {};
  for (const model of supportedModelsData) {
    features[model.id] = {
      contextLength: model.context_length,
      pricing: {
        prompt: model.pricing.prompt,
        completion: model.pricing.completion,
        image: model.pricing.image,
        web_search: model.pricing.web_search,
        request: model.pricing.request,
      },
      inputModalities: model.architecture.input_modalities,
    };
  }

  const outputPath = path.resolve(__dirname, "../src/lib/common/ai/modelFeatures.ts");
  const generatedAt = new Date().toISOString();
  const fileContent = `/* eslint-disable */
// This file is auto-generated by scripts/fetchModelFeatures.ts.
// Do not edit this file manually.

import type { ModelId } from "./models";

export const GENERATED_AT = "${generatedAt}";

export type ModelFeatures = {
  contextLength: number;
  pricing: {
    prompt: string;
    completion: string;
    image: string;
    web_search: string;
    request: string;
  };
  inputModalities: ("text" | "image" | "audio" | "video" | "file")[];
};

export const MODEL_FEATURES: Partial<Record<ModelId, ModelFeatures>> = ${JSON.stringify(
    features,
    null,
    2,
  )};
`;

  await file(outputPath).write(fileContent);
  console.log(`Model features saved to ${outputPath}`);
}

interface OpenRouterModel {
  id: string;
  name: string;
  description: string;
  context_length: number;
  architecture: {
    input_modalities: string[];
  };
  pricing: {
    prompt: string;
    completion: string;
    image: string;
    web_search: string;
    request: string;
  };
}

fetchModelFeatures().catch((err) => {
  console.error("Error fetching model features:", err);
  process.exit(1);
});
